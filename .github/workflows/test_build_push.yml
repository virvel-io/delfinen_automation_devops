# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Test, build and push

on:
  workflow_dispatch:
    inputs:
      output_log:
        description: "Would you like to output the test log?"
        required: true
        default: false
        type: boolean
      version:
        description: "Version of the Docker image to build and push"
        required: true
        default: ""
      deploy: # if true the version will be tagged as latest and automatically deploy to Azure
        description: "Deploy this version?"         
        required: true
        default: false
        type: boolean
      dungeon_master_approved:
        description: "Has the Dungeon Master approved?"
        required: true
        default: false
        type: boolean
        
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  run-tests:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        pip install -r requirements.txt
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest -rs --api_key ${{ secrets.RAINBOW_UNICORN }} > test_output.txt
    - name: Output log
      if: ${{ github.event.inputs.output_log == 'true' }}
      run: cat test_output.txt
  
  build-and-push:
    if: ${{ inputs.version != '' }} # Run only when version is specified 
    runs-on: ubuntu-latest
    needs: run-tests
    env:
      DOCKER_USERNAME: ${{ secrets.COTTON_CANDY_FLUFF }}
      DOCKER_PASSWORD: ${{ secrets.MAGIC_GLITTER }}

    steps:
    - uses: actions/checkout@v4
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_PASSWORD }}
    - name: Build Docker image
      run: docker build -t $DOCKER_USERNAME/weatherapp:${{ inputs.version }} .
    - name: Push Docker image
      run: |
        docker push $DOCKER_USERNAME/weatherapp:${{ inputs.version }}
    - name: Tag as latest and deploy
      if: ${{ github.event.inputs.deploy == 'true' }}
      run: |
        docker tag $DOCKER_USERNAME/weatherapp:${{ inputs.version }} $DOCKER_USERNAME/weatherapp:latest
        docker push $DOCKER_USERNAME/weatherapp:latest

  magic-loot:
    if: ${{ github.event.inputs.dungeon_master_approved == 'true' }}
    runs-on: ubuntu-latest

    steps:
    - name: The Dungeon Master Approves!
      run: echo "üßô‚Äç‚ôÇÔ∏è The Dungeon Master has approved the adventure! Rolling for loot..."
    
    - name: Generate Magical Loot
      run: |
        echo "Retrieving magical items from the Dungeon Master's Vault..."
        ITEMS="${{ secrets.MAGICAL_ITEMS }}"
        IFS=',' read -r -a ITEM_ARRAY <<< "$ITEMS"
        RANDOM_ITEM=${ITEM_ARRAY[$RANDOM % ${#ITEM_ARRAY[@]}]}
        
        echo "‚ú® You have found a magical item: $RANDOM_ITEM!"

    
    
        
